pub struct WithSchema1 ; pub mod with_schema1 { # ! [ allow ( dead_code ) ] pub const OPERATION_NAME : & 'static str = "WithSchema1" ; pub const QUERY : & 'static str = "query WithSchema1 {\n  currentSession {\n    accountId\n  }\n}\n" ; use serde :: { Serialize , Deserialize } ; # [ allow ( dead_code ) ] type Boolean = bool ; # [ allow ( dead_code ) ] type Float = f64 ; # [ allow ( dead_code ) ] type Int = i64 ; # [ allow ( dead_code ) ] type ID = String ; type Uuid = super :: Uuid ; # [ derive ( Serialize ) ] pub struct Variables ; # [ derive ( Deserialize ) ] pub struct ResponseData { # [ serde ( rename = "currentSession" ) ] # [ deprecated ] pub current_session : Option < WithSchema1CurrentSession > , } # [ derive ( Deserialize ) ] pub struct WithSchema1CurrentSession { # [ serde ( rename = "accountId" ) ] # [ deprecated ] pub account_id : Uuid , } } impl graphql_client :: GraphQLQuery for WithSchema1 { type Variables = with_schema1 :: Variables ; type ResponseData = with_schema1 :: ResponseData ; fn build_query ( variables : Self :: Variables ) -> :: graphql_client :: QueryBody < Self :: Variables > { graphql_client :: QueryBody { variables , query : with_schema1 :: QUERY , operation_name : with_schema1 :: OPERATION_NAME , } } }